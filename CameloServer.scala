//> using scala "3"
//> using dep "com.lihaoyi::cask:0.10.2"
//> using dep "com.h2database:h2:2.3.232"
//> using dep "org.scalikejdbc::scalikejdbc:4.3.2"
//> using dep "com.zaxxer:HikariCP:6.2.1"
//> using dep "ch.qos.logback:logback-classic:1.5.16"
//> using dep "com.lihaoyi::requests:0.9.0"

import cask.MainRoutes
import ch.qos.logback.classic.{Level, Logger}
import com.zaxxer.hikari.{HikariConfig, HikariDataSource}
import org.slf4j.LoggerFactory
import scalikejdbc.{
  AutoSession,
  ConnectionPool,
  DBSession,
  DataSourceConnectionPool,
  scalikejdbcSQLInterpolationImplicitDef
}

import java.time.Instant
import scala.util.Using

object CameloServer extends MainRoutes {
  private val logger = LoggerFactory.getLogger(getClass)
  logger.asInstanceOf[Logger].setLevel(Level.INFO)

  val root: Logger = LoggerFactory
    .getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME)
    .asInstanceOf[Logger]
  root.setLevel(Level.WARN)

  logger.info("Server starting on port 8080")
  logger.info("Access on i.e. http://localhost:8080/")

  val hikariConfig = new HikariConfig()
  hikariConfig.setJdbcUrl("jdbc:h2:mem:camelo")
  hikariConfig.setUsername("sa")
  hikariConfig.setPassword("example")
  hikariConfig.setMaximumPoolSize(5)

  val dataSource = new HikariDataSource(hikariConfig)
  ConnectionPool.singleton(new DataSourceConnectionPool(dataSource))

  Using(dataSource.getConnection) {
    _.createStatement()
      .execute(
        """create table orders (
          |    id bigint generated by default as identity primary key,
          |    ordered_at timestamp,
          |    item text not null default 'milk',
          |    unit text not null default 'litres',
          |    quantity int not null default 1000
          |);""".stripMargin
      )
  }

  implicit val session: DBSession = AutoSession

  @cask.get("/")
  def hello(): String = {
    logInfo("showing api")
    """Givsgud!
      |
      |Place orders at http://localhost:8080/order/:n (i.e. http://localhost:8080/order/3)
      |Check order inventory at http://localhost:8080/orders
      |""".stripMargin
  }

  @cask.get("/orders")
  def orders(): String = {
    logInfo("reading inventory")
    selectSumOrders().toString
  }

  @cask.get("/order/:n")
  def fib(n: Int): Int = {
    logInfo(s"fib: $n")
    if (n <= 1) {
      1
    } else {
      val left =
        requests.get(url = s"http://localhost:8080/order/${n - 1}").text().toInt
      val right =
        requests.get(url = s"http://localhost:8080/order/${n - 2}").text().toInt
      left + right
    }
  }

  private def logInfo(s: String): Unit = {
    logger.info(s)
    logger.debug("You just ordered 1000 litres of milk!")
    val now = Instant.now()
    sql"INSERT INTO orders (ordered_at) VALUES ($now)".update.apply()
  }

  private def selectSumOrders(): Long = {
    sql"select coalesce(sum(quantity), 0) from orders"
      .map(rs => rs.long(1))
      .single()
      .getOrElse(0L)
  }

  initialize()
}
